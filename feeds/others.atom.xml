<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coding Life</title><link href="http://guqian110.github.io/" rel="alternate"></link><link href="http://guqian110.github.io/feeds/others.atom.xml" rel="self"></link><id>http://guqian110.github.io/</id><updated>2014-05-14T00:41:00+08:00</updated><entry><title>麦田里的守望者 书评</title><link href="http://guqian110.github.io/pages/2014/05/14/the_catcher_in_the_rye_review.html" rel="alternate"></link><updated>2014-05-14T00:41:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-05-14:pages/2014/05/14/the_catcher_in_the_rye_review.html</id><summary type="html">&lt;p&gt;&lt;img alt="the catcher in the rye" src="/images/the-catcher-in-the-rye/the_catcher_in_the_rye.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;如何认识这本书&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;以前就听说过这本书的名字，真正感兴趣是在《我爱摇滚乐》上看到的一篇文章，介绍了枪杀传奇乐队披头士 The Beatles 的主唱约翰·列侬(John Winston Lennon) 的凶手马克·查普曼 (Mark David Chapman)，他被捕时身上就带着一本《麦田里的守望者》。当查普曼被捕时，警方从他的副本中发现了这样的话：“亲爱的霍尔顿·考尔菲德，自霍尔顿·考尔菲德，这是我的陈述。”&lt;/p&gt;
&lt;p&gt;后来才发现，其实这本书很有争议，它和几起枪击案与小说有关，这包括罗伯特·约翰·巴窦枪击丽贝卡·谢弗，约翰·欣克利刺杀罗纳德·里根未遂。马克·大卫·查普曼枪击了约翰·列侬。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;这是一本曾样的书&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://zh.wikipedia.org/wiki/%E9%BA%A5%E7%94%B0%E6%8D%95%E6%89%8B"&gt;麦田里的守望者 on wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该书于1951年出版之后，立刻引起巨大的轰动，受到读者——特别是青年人——的热烈的欢迎，被翻译为多国语版。小说每年大约有250,000本售出、总计为6500万本。时代杂志将《麦田里的守望者》列在“2005年度百大英语小说（自1923年起）”榜上，现代图书馆及其读者也将其列在20世纪百大英文小说榜上。赞赏者认为本书用青少年的口吻平铺直叙，增加了作品的感染力，传神地描写主角的内心思维，并说出了青少年不满成年世界充满虚伪欺瞒的心声。批评者则认为书中主角离经叛道，逃学、吸烟、喝酒又满嘴粗话，会给年轻读者带来不良影响。当时许多图书馆及学校将之列为禁书，并被列在美国最具挑战性图书榜上。但现在这本书却是许多美国学校的指定读物。有的评论家说，它“大大地影响了好几代美国青年”。而且有学者认为，霍尔顿是当代美国文学中最早出现的反英雄形象之一。&lt;/p&gt;
&lt;p&gt;《麦田里的守望者》位列20世纪最佳小说之林。小说出版后不久，纳什·K·伯格（Nash K. Burger）写给《纽约时报》称小说为“少见的杰作”，詹姆斯·斯特恩（James Stern）则模仿霍尔顿的语气，为小说送上钦佩之词。.美国前总统乔治·赫伯特·沃克·布什称小说为“了不起的作品”，并称它启迪了自己。2009年6月，BBC的芬洛·卢勒（Finlo Rohrer）写道小说问世已有58年之久，但依然是“青春期的定义之作”。霍尔顿常常愤世嫉俗、郁郁寡欢、离群索居、与世隔绝、迷失方向、玩世不恭”。亚当·戈普尼克认为小说与美国文学中的《了不起的盖茨比》、《哈克历险记》并列为“三部完美之作”，称“在对纽约50年代的捕捉上，没有哪一部作品可以与《麦田里的守望者》并驾齐驱。”&lt;/p&gt;
&lt;p&gt;并非所有评论都是积极的；与其他评论家一样，卢勒写道：“笼罩在神秘之中的小说并没有满足读者的期待，这让人感到失望。塞林格助长了这种神秘感，或者说，他什么都没做。”。。论道小说风靡与争议的背后缘故时，称小说“捕捉到了青春期存在的焦虑”、“中心人物复杂”、“对话风格平易近人”；与此同时，一些读者可能会对“纽约40年代的俗语”、“人物的自恋”、“过多的牢骚”表示反感。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;每个人心中都有一个霍尔顿&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;花费了三天时间看完了全书，默默无语，不知道该说些什么...&lt;/p&gt;
&lt;p&gt;这本书描写的对象是上世纪 50 年代，美国战后一代人的精神状态，他们酗酒、抽烟、吸毒，被称为 “垮掉的一代”，破破烂烂的T恤衫和牛仔裤，开着父母给的昂贵的跑车，抽一支接一支的大麻香烟，在公共场所旁若无人地亲吻，挑战社会传统和道德底线。因为时代背景、文化背景不同，很多中国小孩刚开始看前几章时，不是很有共鸣（比如我），甚至可能读到一半就想放弃。但是如果你坚持看完，相信我，你会不由自主的喜欢上这个满口脏话、叛逆、成绩不及格的问题少年——霍尔顿。&lt;/p&gt;
&lt;p&gt;每个人都有不同的成长经历，或顺利，或坎坷，但是没有人永远一帆风顺，每个人都有不开心、孤独、寂寞、迷茫的时候，如果你坚持看下去，你会从这个叛逆少年身上发现自己的影子，触动内心那温柔的一角。&lt;/p&gt;
&lt;h3&gt;青少年 &amp;amp; 成年人&lt;/h3&gt;
&lt;p&gt;这本书描写的对象是美国 “垮掉的一代”，和他们联系在一起的是酗酒、大麻、吸毒、叛逆等词，作为中国人，作为 90 后，我们似乎和他们没有任何交集和共同点 。但是仔细回顾历史，就会发现其实不光美国这一代人，在人类社会发展历史中，每一代人在前辈口中都是几乎一样的一无是处 。我们的父辈似乎总在对我们挑刺，认为我们叛逆、不听话，但是他们在批评我们时，却忘了他们当年也是这样过来的，就像 70 后看不顺眼 80 后，80 后看不顺眼 90 后，现在，我们90 后也看不顺眼 00 后，认为这帮熊孩子屁事不懂，一天只知道火星文、非主流、45度仰望天空 。&lt;strong&gt;而这说白了就是青少年和成年人世界的代沟。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;青少年的困境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;美国硅谷创业之父 Paul Graham 的著作《黑客与画家》中第一篇文章：为什么书呆子不受欢迎，就讨论了青少年和成人世界的隔阂 。&lt;/p&gt;
&lt;p&gt;关于校园暴力，成年人不是不知道孩子们内部发生的这些事，他们知道孩子的行为有时候是极端残酷的，正如我们知道贫穷国家的人们生活极端艰难，但是，像所有人一样，成年人不喜欢揪住不放这种令人不快的事实 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学校就像是监狱一样，老师就像是狱卒。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个比喻是作者形容美国公立学校的，或许在中国，即使一个学校再烂，大多数中国人都不会这么描述，中国的 “标准答案” 是学校是花园，老师辛勤的园丁。如今的成年人根本不接受青少年，他们在上班的路上顺便把孩子送到学校关着，就像周末出门时把狗送到寄养的地方。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;而在工业社会以前，青少年的角色则更加积极，他们是学徒，不是在作坊里，就是在农庄里，或者是在某艘军舰上，他们是成年人社会的低级成员。青少年尊重成年人，成年人也接受青少年。而现在，青少年在生产活动中，根本毫无用处，只能在快餐店充当廉价劳动力。所以，成年人不得不把他们集中到一起，让几个成年人看守所有的孩子 —— 学校诞生了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很新奇的看法，和中国传统意见完全不同，我们不妨保持 open mind，某种程度上这个分析是有道理的 :-P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隔阂&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们总是固执己见，尤其是青少年，谁没有从逃课准备去西部生活的霍尔顿身上看到自己的影子呢？但愿不要有一天，像 Eason 在 《shall we talk》 中唱的一样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;孩童只盼望歡樂　大人只知道寄望&lt;/p&gt;
&lt;p&gt;為何都不大懂得努力體恤對方&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;陪我講　陪我講出我們最後何以生疏&lt;/p&gt;
&lt;p&gt;誰怕講　誰會可悲得過孤獨探戈&lt;/p&gt;
&lt;p&gt;難得　可以同座　何以　要忌諱赤裸&lt;/p&gt;
&lt;p&gt;如果心聲真有療效　誰怕暴露更多　你別怕我&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;成人只寄望收穫　情人只聽見承諾&lt;/p&gt;
&lt;p&gt;為何都不大懂得努力珍惜對方&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;陪我講　陪我講出我們最後何以生疏&lt;/p&gt;
&lt;p&gt;誰怕講　誰會可悲得過孤獨探戈&lt;/p&gt;
&lt;p&gt;難得　可以同座　何以　要忌諱赤裸&lt;/p&gt;
&lt;p&gt;如果心聲真有療效　誰怕暴露更多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Hold on&lt;/h3&gt;
&lt;p&gt;面对这个世界，你需要的是保持一个善良的心，并且坚持下去。每个人都有不开心、孤独、寂寞、迷茫的时候，保持一颗善良朴实的心灵，坚守住我们心中的那片麦田才是真正难能可贵的事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有那么一群小孩子在一大块麦田里做游戏。几千几万个小孩子，附近没有一个人——没有一个大人，我是说 —— 除了我。
我呢，就站在那混帐的悬崖边。我的职务是在那儿守望，要是有哪个孩子往悬崖边奔来，我就把他捉住——我是说孩子们都在狂奔，也不知道自己是往哪儿跑，我得从什么地方出来，把他们捉住。
我整天就干这样的事。我只是想当个麦田里的守望者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;To-Do List&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;麦田里的守望者(The Catcher in the Rye)、在路上(On the Road)、了不起的盖茨比(The Great Gatsby)并称 “美国xxx小说”，盖茨比看过电影了，小说没有看过，以后有时间了再看～&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On the Road&lt;/li&gt;
&lt;li&gt;The Great Gatsby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://zh.wikipedia.org/wiki/%E9%BA%A5%E7%94%B0%E6%8D%95%E6%89%8B"&gt;麦田里的守望者 on wikipedia&lt;/a&gt;&lt;/p&gt;</summary><category term="the catcher in the rye"></category><category term="review"></category></entry><entry><title>我的 PKM</title><link href="http://guqian110.github.io/pages/2014/05/06/my_pkm.html" rel="alternate"></link><updated>2014-05-06T15:57:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-05-06:pages/2014/05/06/my_pkm.html</id><summary type="html">&lt;h2&gt;PKM&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;什么是 PKM&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;个人知识管理(Personal Knowledge Management)是一种新的知识管理的理念和方法，能将个人拥有的各种资料、随手可得的信息变成更具价值的知识，最终利于自己的工作、生活。通过对个人知识的管理，人们可以养成良好的学习习惯,增强信息素养，完善自己的专业知识体系,提高自己的能力和竞争力，为实现个人价值和可持续发展打下坚实基础。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;知乎上的&lt;a href="http://www.zhihu.com/question/19576595"&gt;回答&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人知识管理的概念最早是由Paul Dorsey教授提出的,原文为” Personal Knowledge Management should be viewed as a set a problem-solving skills that have both a logical or conceptual as well as physical or hands-on component. ”,中文意思就是: 个人知识管理应该被看作既有逻辑概念层面又有实际操作层面的一套解决问题的技巧与方法。所以个人知识管理主要讲的是一种方法论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Personal_knowledge_management"&gt;Personal knowledge management on wikipedia&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;为什么写这篇 blog&lt;/h3&gt;
&lt;p&gt;从小到大，上了这么多年的学，每个人都有自己的学习习惯和知识管理方法。这篇 blog 是在我 Google、知乎问答、参考相关博客内容的基础上，总结出的学习习惯和使用各种工具的经验，写这篇博客的目的不是秀逼格有多高（估计很多人都看不上），也不是所谓的教程（根本不够资格），而是&lt;strong&gt;为了分享和讨论&lt;/strong&gt; :-D&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;获取知识&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;总结我的知识来源，大致可以分为 3 类：纸质书籍、网络资源、其他 。分别总结如下&lt;/p&gt;
&lt;h3&gt;书籍&lt;/h3&gt;
&lt;p&gt;书籍上的知识占到了我总来源的 50% 。相比于电子读物，我更喜欢阅读纸质书籍。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;纸质书籍更适合深度阅读&lt;/p&gt;
&lt;p&gt;这就是为什么很多码农桌子上都有那么几本经典著作，虽然他们的电脑里面也保存着相应的电子版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纸和笔是最原始的阅读工具，但是也是最有效，或者 &lt;em&gt;最自由的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是目前电子书籍/笔记最大的缺点，写一段标注文字，画一个草图，列一个表格，插入一个公式，不仅需要花费很多时间，而且操作很繁琐，结果也往往差强人意 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读体验&lt;/p&gt;
&lt;p&gt;毫无疑问纸质书籍的阅读体验更好一些，不然 Kindle 也就不会出现了 :-D&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于读书笔记，我的方法很原始 =.=&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书边笔记，这样笔记和书是一体的，如果空白不够大，有便利贴&lt;/li&gt;
&lt;li&gt;标记符号，简单的标记，比如 &lt;code&gt;？&lt;/code&gt; 表示疑问、&lt;code&gt;！&lt;/code&gt; 表示注意、&lt;code&gt;||&lt;/code&gt; 表示分层、&lt;code&gt;*&lt;/code&gt; 表示重要内容、圈出关键名词/定义 etc&lt;/li&gt;
&lt;li&gt;整理笔记，定期将书本上的笔记整理到 Blog / Evernote 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;网络&lt;/h3&gt;
&lt;p&gt;互联网时代，善于利用互联网上的资源，相当于守着一座 “知识金山”&lt;/p&gt;
&lt;p&gt;每天面对海量的信息，如果不加以过滤，我们就会被淹没在信息的海洋之中，浪费了大量时间而毫无收益。我的信息来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSS 订阅&lt;/p&gt;
&lt;p&gt;以前使用 Google Reader，自从 GR 死了之后，转到了 &lt;a href="http://cloud.feedly.com"&gt;Feedly&lt;/a&gt; 。主要是搜集一些大牛的博客，订阅 &lt;em&gt;真正&lt;/em&gt; 感兴趣的内容。&lt;/p&gt;
&lt;p&gt;RSS 订阅是个时间黑洞，曾经我的 RSS 订阅长期 1000+，而且我从来没有看完过，作为处女座强迫症患者，有时候花费了很多时间，甚至占用上课学习时间。后来看到 &lt;a href="http://mindhacks.cn/"&gt;刘未鹏&lt;/a&gt; 在 &lt;a href="http://book.douban.com/subject/6709809/"&gt;《暗时间》&lt;/a&gt; 中有一篇文章讲自己的学习习惯，才明白原来这是源自人不肯 “关上一扇门” 的心理。&lt;strong&gt;事实上，真正宝贵的信息，在其他来源你也可以接触到。&lt;/strong&gt;于是，我退订了很多从来不看或者很少看的源，从此，告别阅读焦虑。:-D&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google / Wiki&lt;/p&gt;
&lt;p&gt;拒绝做伸手党，我们遇到的很多问题实际上别人都遇到过了，并且提供了解决方法。在网上发帖问别人的时候，很多问题都可以从 FAQ、官方文档中都能找到答案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;知乎 / Quora / Stack Overflow&lt;/p&gt;
&lt;p&gt;这绝对是一个值得一生相伴的好东西 :-P 长期混迹于此，瞬间高大上的境界、令人仰视的逼格不再是梦想，相信我，你的人生因此而改变！（利益相关：非广告，深度沉迷者）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;论坛 / 豆瓣小组&lt;/p&gt;
&lt;p&gt;当然是讨论知识的论坛，而非八卦娱乐主题的论坛。长期泡论坛，不仅可以寻找答案，帮助别人，还可以扩展自己的见识，结识大牛，论坛里面的老油条个个都是大神。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用到的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://cloud.feedly.com"&gt;feedly&lt;/a&gt; 是一款 RSS 阅读器&lt;/p&gt;
&lt;p&gt;同类产品还有很多，比如国外的 Diggo、国内的鲜果、豆瓣九点等 。feedly 在国内访问并不是很稳定，即使这样，我仍然选择它是因为舒服的排版、另外功能上有些源 Diggo 无法抓取到 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://getpocket.com/a/"&gt;pocket&lt;/a&gt; 是一个用于管理互联网文章的应用程序&lt;/p&gt;
&lt;p&gt;PC 上有 chrome 插件，手机上也有相应的客户端，这样我们就可以很方便地在各个平台上、把各个源的文章都收集到一起，稍后阅读（比如排队、休息时）。&lt;/p&gt;
&lt;p&gt;我还它当作汇聚资料的容器使用，比如我写这篇博客，从网上搜集到很多相关内容，把我认为重要的保存在 pocket 当中，然后再做整理 。&lt;/p&gt;
&lt;p&gt;P.S. 还有另外一个方法，feedly 上的文章可以直接保存到 Evernote 中，但是这是付费功能，虽然可以用 ifttt 解决，但是这种方法无法收集其他地方的文章，而且，不知道是不是因为天朝的原因，ifttt 收集的速度并不快，一般要 30 分钟左右才能在 Evernote 中看到收集的文章，最重要的一点，在 Evernote 中看文章，眼睛一直盯着屏幕的右下角，都快成斜眼了 T_T，so 还是 pocket 好！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;p&gt;所谓其他，就是在其它地方，看到的、想到的，使用手机肯定是最方便的。我只使用过两款应用 Google Keep 和 Evernote 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://zh.wikipedia.org/wiki/Google_Keep"&gt;Google Keep&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google 发布的笔记软件，和其他各种笔记类软件相比，Keep 的功能实在是 “弱爆了”，或许称之为 &lt;em&gt;便签 sticker&lt;/em&gt; 更合适 .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大名鼎鼎的笔记软件，功能非常强大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有很多人把这两个软件做比较&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20869752"&gt;Google Keep VS Evernote，你还会继续使用 Evernote 吗？为什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20859926"&gt;刚宣布 Reader 关停，Google Keep 随即上线，这是用来跟 Evernote 竞争的产品吗？谷歌做这个有什么优势？谷歌如何让用户有安全感地放心使用旗下产品？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;事实上，这两个产品的定位根本就不一样，引用里面的某个答案&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Keep 偏重于随时随地记录碎片知识, 建立待办事项, 是个效率工具.完成的事情就随手一滑存档掉, 并没有提供更一步的存储整理的途径. 所以 &lt;strong&gt;Google Keep并不是知识的终点&lt;/strong&gt;,它只是用来记录临时想法的,这恰恰和它的logo形象十分契合(想想卡通里面人物突然奇思妙想了...灯泡就亮了- -). 它就是用来存储这些"灯泡"的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般，我使用 Keep 来记录平时的想法，也把它当作便签来使用，记录杂事，有部分 to-do-list 的作用。毕竟，Evernote 缓慢的启动速度和不方便的操作实在是太影响心情了 。&lt;/p&gt;
&lt;p&gt;还有一个答案，不能同意更多：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;归根到底，&lt;strong&gt;keep是一个轻量级GTD系统，它要解决的问题和evernote是不同的。那些认为keep可以取代evernote的用户，他们本身就不需要evernote&lt;/strong&gt; ——对他们而言，evernote的强大反而太过繁冗，已是多余。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;整理知识&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;获取到知识，下一步就是整理和吸收它们了。&lt;/p&gt;
&lt;h3&gt;Evernote&lt;/h3&gt;
&lt;p&gt;说道 PKM，就不得不提 Evernote 。这么一款大名鼎鼎的笔记软件，有很多人在使用，分享使用技巧 。搜集到一个很全的资源帖：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.douban.com/group/topic/28544265/"&gt;印象笔记 Evernote 教程 (douban)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面总结了官方的教程、民间高手的使用心得。基本上花费一下午的时间在豆瓣 &amp;amp; 知乎上逛一逛，就可以成为高手了 。&lt;/p&gt;
&lt;p&gt;我不是 EN 的高级用户，也没有专门去探索进阶用法，我只是把它当作单纯的电子笔记本，不代替便签（Google Keep），也不代替知识管理软件（Wiz、OneNote），一般也就以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存博客草稿，毕竟 Keep 这样的便签不适合于写大段文字&lt;/li&gt;
&lt;li&gt;记录私人笔记&lt;/li&gt;
&lt;li&gt;摘抄网络上的精彩内容（也是为写 blog 服务），EN 在 chrome 上的 web clipper 插件真心不错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;忍不住跑题说一下我的使用感受：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：全平台、全功能、云同步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：大而无当，这是一款变形金刚一样的软件，功能强大到有人为此写出一本厚厚的&lt;a href="http://book.douban.com/subject/24524405/"&gt;使用教程&lt;/a&gt; 。但是，强大的功能也就意味着软件的笨重和操作的繁琐。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和便签类应用相比&lt;/p&gt;
&lt;p&gt;它太笨重了！ 与 Keep 简洁的操作（快速新建、左右滑动归档、撤销），这货简直慢的让人无法忍受。知乎上有个贴子专门讨论这个问题：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20820355"&gt;为什么有人对印象笔记没有任何兴趣呢？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中有个回答，也是我的感受：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你明知道它的功能正是你需要的，但打開它就是不想用，也不知道從何用起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和知识管理类应用相比&lt;/p&gt;
&lt;p&gt;仅个人意见，EN 并不适合作知识管理 。它只有 笔记本 和 笔记本组 这两个概念，也就是说，它最多支持 2 级目录，而实际上，我们的知识体系应该是和树一样，不断地分支增长的 。其他笔记类应用比如 Wiz 笔记就要比它好很多 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; 我曾经也为用 Keep 还是 EN 纠结过，最终我选择了 Keep，直到后来我看到这句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那些认为keep可以取代evernote的用户，他们本身就不需要evernote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我才明白，我根本就不需要 EN！我曾经尝试过在 EN 中建立一个完备正交的目录，后来发现，其中最重要的部分和我的博客目录是一模一样的 。我已经有个博客了，为什么还要 EN 呢？（个人认为 blog 比 EN 更好，原因后文解释）&lt;/p&gt;
&lt;p&gt;事实上很多人根本就没有管理知识的必要，因为他们没有那么多知识需要整理。使用 Evernote 的动机无非就是人类的天性 ——“收藏” 癖好，看到什么东西都想收藏，比如用过的袋子，小本子，现在轮到网页，图片，链接了。可是我们收藏了以后还会去看么？就像我们硬盘里面收集的 “世界一百部名著” 一样，它静静地躺在硬盘中，积累了厚厚的灰 。&lt;/p&gt;
&lt;p&gt;EN 的 logo 是一只大象，寓意来自美国谚语 “An elephant never forgets”，大象的记忆力很强，这和它的宣传 “Evernote 是你的第二个大脑” 是一致的，而且是一个永远不会忘记的大脑。&lt;/p&gt;
&lt;p&gt;所以，为什么不就这么用呢？在 EN 中新建几个笔记本，把我们不需要记住但是以后可能会用到的 “知识” 丢进去，加上简单的标签，然后我们只需要记住在笔记里有这么个记录，然后其他的全都可以忘掉了，需要的时候去搜索一下就可以了。利用它强大的接口功能，记录杂事、美食、私人日记、生活小感悟、小常识，但是对于体系结构化的知识，个人认为写一个技术博客是更优的选择（理由在后文） :-P&lt;/p&gt;
&lt;p&gt;漫长的跑题终于结束了，总之就是，&lt;strong&gt;把 EN 当作收集小知识的笔记本即可，个人知识管理选择其他软件/写博客是更优的选择。给它做做减法，使用你需要的功能，不要成为工具的奴隶。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;XMind&lt;/h3&gt;
&lt;p&gt;目前还处于用笔和纸的阶段，大概了解了一些 XMind 的用途，感觉很好很强大。尤其是用它建立的结构化的提纲，对于整理文章、知识体系结构有巨大的帮助。还在探索中，更加进阶的功能和使用心得以后再总结。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;使用/分享知识&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;月光博客中的一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知识共享和传播，是为了让别人知道你知道的知识，并得到信息的反馈，为什么要分享，不在于你认识什么人，而在于什么人认识你，不在于什么人影响了你，而在于你影响了什么人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取、整理知识，接下来就是使用/分享知识。只有把别人的东西转化为自己的，才算是掌握了。我觉得最好的方法就是写 Blog。&lt;/p&gt;
&lt;h3&gt;为什么要写 Blog&lt;/h3&gt;
&lt;p&gt;这个问题曾经我也问过自己，以前只是看到学长学姐们写的 Blog，感觉很厉害，认为自己也应该有这样一个。后来看到 &lt;a href="http://book.douban.com/subject/6709809/"&gt;暗时间&lt;/a&gt; 里面的两篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mindhacks.cn/2009/02/09/writing-is-better-thinking/"&gt;《书写是为了更好的思考》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/"&gt;《为什么你从现在开始就应该写博客》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;认真总结了一下写博客的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总结知识&lt;/p&gt;
&lt;p&gt;这是我写 Blog 最直接的一个动机。只有把别人的东西转化为自己的，才算是真正掌握了。记录下自己某段时间的学习收获，思考感悟，不仅可以帮助自己回忆以前的知识，说不定还可以帮助到别人（我就是受益者，从别人的博客中学习到了很多知识）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帮助思考&lt;/p&gt;
&lt;p&gt;这是写 Blog 最大的好处。这个好处不仅仅局限于写 Blog 这种形式，无论以什么方式，只要写下你的思考过程和内容，就可以帮助你思考问题，也就是 &lt;strong&gt;书写&lt;/strong&gt; 的好处。&lt;a href="http://book.douban.com/subject/6709809/"&gt;《暗时间》&lt;/a&gt; 里面有个很形象的比喻：&lt;em&gt;人的思考就像是在黑暗中打着手电筒前行。&lt;/em&gt;因为人的脑力资源是有限的，所以我们经常遇到想问题想岔了，然后回不到原点的情况。书写不仅可以帮助我们缓存手电筒照到的区域，还可以帮助我们扩大手电筒的照亮直径。比如我写这篇博客，开始只是记录下别人的 PKM 的方法和工具的关键字，然后在大纲和简记的基础上，补充自己的心得完成的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;得到交流帮助&lt;/p&gt;
&lt;p&gt;Blog 相比于 EN 的最大的优势。写 Blog 是开放的，别人可以随意看，而写 EN 我们只能自己看（EN 的共享笔记体验并不好）。每个人的思考都有盲点，你的盲点可以在别人那里得到补充，知识和思考在讨论得到提炼升华。&lt;/p&gt;
&lt;p&gt;还有一个好处是，敦促你必须认真思考。想象你在给一个玩偶小熊讲一个原理、技术，那么你必须 &lt;em&gt;“彻底反思整个知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的。设想自己在 11 层，给处于 1 层的小熊讲明白一件事。”&lt;/em&gt; 现在你不需要小熊了，因为有更挑剔的的对手 —— 你的博客的读者。你偷懒不写/写出无意义的文章，他们不会像小熊一样包容你，只有写出高质量的博客才对得起观众，否则就是浪费他们的时间了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锻炼心智&lt;/p&gt;
&lt;p&gt;激励你去坚持学习和思考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了让你的博客有价值，你必须不断地总结自己学习的结果，比必须不断思考，给出比别人深刻、读到的见解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让你学会持之以恒地做一件事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述体验在写代码时也能体会到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锻炼文字功底&lt;/p&gt;
&lt;p&gt;对于码农，这算是优点么？反正没有坏处 :-P&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;写在最后&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;总结一下总的流程就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取知识&lt;/strong&gt;：书籍 + feedly + pocket + Google Keep&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整理知识&lt;/strong&gt;：Evernote + XMind&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 / 分享知识&lt;/strong&gt;：Blog&lt;/p&gt;
&lt;p&gt;总结出来并且在实际行动中加以利用才是王道。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.sand-ox.com/2011/02/pkm-tools/"&gt;我，和我的知识工具们 (2011-02-15 更新)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.williamlong.info/archives/3388.html"&gt;我的知识管理工具列表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/topic/19557303"&gt;Evernote on zhihu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/topic/19558457"&gt;PKM on zhihu&lt;/a&gt;&lt;/p&gt;</summary><category term="PKM"></category></entry><entry><title>把时间当作朋友 书评</title><link href="http://guqian110.github.io/pages/2014/04/25/make_friends_with_time_review.html" rel="alternate"></link><updated>2014-04-25T15:50:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-04-25:pages/2014/04/25/make_friends_with_time_review.html</id><summary type="html">&lt;h2&gt;如梦初醒&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;突然发现自己已然变成了学校里面的老人，还有不多时日，就要离开在这片我生活了7年的土地，还来不及伤感，更多的是惊慌和不安 。从来没有这么感觉时间不够用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每天都在忙碌，但是不知道在忙碌什么；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;论文貌似总在和我捉迷藏，连影子都不显露；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静心思考自己的 “核心战斗力”。才发现自己还是当年的那个 “战五渣”；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生活中有那么多美好的事物，等着我去发现、去体验，比如健身、阅读、骑行...还有写不完的代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;归结起来就是一句话：&lt;strong&gt;时间不够用&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;解决方法也很简单：&lt;strong&gt;管理时间&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;“管理时间” 这个话题当初我是如此的不屑，因为我 &lt;em&gt;自信&lt;/em&gt; 自己的自制力，现在看来，更确切的说法应该是我的 &lt;em&gt;自负&lt;/em&gt; 。亡羊补牢，为时未晚！于是，从豆瓣、大神们的博客上搜集到了几本书，甚至还有平时买书是赠送的 “心灵鸡汤” ...是时候认真规划一下了，学会管理时间 。&lt;/p&gt;
&lt;p&gt;暂时手头有以下几本书，后续还有很多计划看的书单 :-D（关于时间管理，正在学习ing，以后再总结）&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/3609132/"&gt;把时间当作朋友&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/6709809/"&gt;暗时间&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/1958547/"&gt;How to Get Things Down&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/11523251/"&gt;超级时间整理术&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;花费了将近两周的时间，在闲时看完了这本 《与时间做朋友》 。写写心得体会吧～&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;把时间当作朋友&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;关于作者 &lt;a href="http://lixiaolai.com/"&gt;李笑來&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先来点正面的：（&lt;a href="http://baike.baidu.com/view/664966.htm?fr=wordsearch"&gt;某度百科&lt;/a&gt;，没有搜到 wiki）&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上大学学的是会计，出来做的却是销售。再后来加盟新东方，任教至今已有N年。其间学生数万。著有畅销 TOEFL 辅导书籍《TOEFL核心词汇21天突破》、《TOEFL高分作文》、《把时间当作朋友》、《SAT官方指南全程导学》、《新托福iBT词汇分类突破》，常年位于同类图书销售排行榜首。授课风格以朴实、有效为长。格外注重培养学生的独立思考能力，凡事都从独特的视角出发，而不限于书本知识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李笑来最大的贡献是《TOEFL核心词汇21天突破》，这本词汇书里面的很多词汇出现的频率都很高，里面共有2140个单词，可以很快的背一遍然后重复很多遍，这样容你有时间把所有单词都记住；如果说背那种有10000多个单词的书恐怕难以坚持到最后。 因为这种优点，笑来成为托福考试旗帜性的人物。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;于2007年2月前后开始动手写的大约八九十篇文章的集合。2009年6月 出版《把时间当做朋友》，至次年6月已经重印11次，深受读者喜爱。这本书从心智成长的角度来谈时间管理，指出时间管理是成功的关键所在。作者引述自己从事的职业中所遇到的事例，告诉我们：如何打开心智，如何运用心智来和时间做朋友，如何理解时间管理的意义，在时间管理上取得突破，进而用心智开启自己的人生成功之旅。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;再来点负面的～&lt;/p&gt;
&lt;p&gt;从买到书，然后知道了这个人，关注到了一些李笑來老师的言论（博客、twitter、微薄），再结合对这本书的感受，个人对李老师不是很感冒 =.=&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20367798"&gt;李笑来有哪些明显错误的观点？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lixiaolai.com/archives/10529.html"&gt;臭不要脸的流氓都一个德行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/19596976"&gt;对李笑来的有关知乎《臭不要脸的流氓都一个德行》一文有什么看法？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;李笑來老师在书中一直强调 “开启心智，获得解放”，但就我从网络上他的言论来看，他远远没有达到这个标准，我认为，任何一个达到开启心智的人，不会在网上撒破，写 blog 破口大骂，武断地下结论，在 twitter 上和网友通宵争论 。一个人连自己的嘴巴都管不好，竟然也写书教导别人 “开启心智”.&lt;/p&gt;
&lt;p&gt;我阴暗地猜测一下，或许是因为他在新东方当老师的经历的后遗症（是的，我对新东方老师存有偏见，结合身边的一些同学的感受，或许称新东方老师为推销员更合适...）；也许和他的学历有关，这里不是对学历的歧视，学历低的牛人多了去了，只是有时候学历会限制一个人的眼界和修养，这本书的第一版出版人 &lt;a href="http://www.zhihu.com/people/yeka/about"&gt;周筠&lt;/a&gt; 在知乎上评论李笑來时就如是说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若李笑来当年的求学环境更好，可能思维会比现在灵活而视野宽广。基本上靠自学、野路子出身、容易剑走偏锋的他，最需要的还是对自己的反思。这种反思，还尤其包括对自己优势和短处的清晰判断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有一种可能，这是他的营销手段，毕竟他在创业，使自己时刻处于舆论之中，就是绝佳的免费广告 。&lt;/p&gt;
&lt;h3&gt;读书心得&lt;/h3&gt;
&lt;p&gt;首先，不得不承认，这本书的口碑相当不错，在豆瓣上评分为8.8 分，在书的扉页介绍中也是特意提到了这一点 。而且被列为 “中国书刊发行协2010年度全行业优秀畅销品种”，但是于我而言，看这本书的过程是 “惊喜——还可以——一般”  。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管理自己&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“要管理的不是时间，而是自己 。” 可能这是我从本书中学习到的最有用的观点吧 。时间不会因为我们管理减缓流逝速度，我们能做的只有管理自己 。&lt;/p&gt;
&lt;p&gt;事实上，这本书关于管理自己，争取时间的内容并不多，甚至没有占到总篇幅的一半 .书名是 “把时间当作朋友”，开篇说 “你是不是很缺时间？你想不想和时间做朋友？相信我，你并不孤独，只要看下去就能找到和时间做朋友的方法！”，然后在草草介绍了时间管理方面的内容之后，文章开始转向另外一个话题——运用心智获得解放 ... 甚至类似跑题问在具体每一小节中都有不同程度的复现 。&lt;/p&gt;
&lt;p&gt;关于管理自己、规划时间的内容，目前还在看 GTD 相关的书，看完再总结～&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;成功学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这本书在序言中就在抨击 “成功学”，并且申明本书绝对不是一本成功学，也不是心灵鸡汤，也不是讲大道理的书，也不是一本随便翻翻就可以的书 。尽管作者尽量以朴素的方式总结自己的经验，并且以朴素的语言表达出来，但是正如自己所言， “不可避免地透漏出说教的神态” 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Critical Thinking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在读这本书前，我对 &lt;a href="http://en.wikipedia.org/wiki/Critical_thinking"&gt;critical thinking&lt;/a&gt; 只是有所了解，于是运用自己理解的方法，来审视这本书的内容，不失为一个绝佳的练习方法 :-D 然后我发现文章中很多地方的逻辑并不严密，甚至有些结论无中生有，或者过于武断，牵强附会 。&lt;/p&gt;
&lt;p&gt;P.S. 关于 critical thinking ，阅读更多的书以后再总结 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;论点、论据、论证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这本书一开始描绘的问题让我仿佛找到知己，因为我就是这样一个时间不够用患者，顺带 拖延症晚期，看到李老师说可以 “开启心智，获得解放，和时间做朋友” 时，可以想想我是多么的激动，差点就泪流满面了 T_T&lt;/p&gt;
&lt;p&gt;然后我就抱着 “开启心智” 的伟大目标开始了后面的阅读，但是让人失望的是，作者在后面的论述并没有表现出和前言相当的精彩内容。首先，他的某些结论或许是他长期思考总结出来的，适合于他，但是并不能作为普适的经验，甚至有些结论过于武断，只是他的生活经验，缺乏科学的支持；其次，作为一个典型的工科学生，对他的论点、论据、论证方法实在无法赞同，很多时候感觉是想到哪里写到哪里，到后面都忘了前文的目的，转而说下一个问题，就像是聊天一样，扯到十万八里之外了。完全没有达到 “critical thinking” 的标准 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;总之，抛开对作者的映像，就这本书而言，还是比较值得一读的（只是没有像宣传的那么唬），作为一本心理学、时间管理、自我实现方面的入门级书，看看总是没有错的 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;其他人的评价&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;豆瓣上有篇书评，个人感觉相当精髓，不能同意更多：&lt;a href="http://book.douban.com/review/5598312/"&gt;李氏“中医”？&lt;/a&gt;，其中有一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我相信这本书是有阶段性意义的，对我个人而言，甚至可以说相当大。 就是在这本书里，我看到一个勇于面对自己的缺点的人，一个认同个人奋斗改变人生的人，令人遗憾的是，我也看到一个仅仅是文笔简洁的人，一个至今仍局限于个人经验而不愿意走出来的人。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/people/yeka/about"&gt;周筠&lt;/a&gt;老师评价：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我是李笑来《把时间当作朋友》第一版的出版人，他的书中的好些观点对我都有触动，给我不少帮助，为此很感谢他。&lt;strong&gt;至今，我还是认为《把时间当作朋友》对很多迷途中的年轻人会有较大帮助，不能因为其中有些观点经不起推敲，就否定这本书的价值。&lt;/strong&gt;对我来说，这本书是有营养的，所以我才会热心出版。&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="时间管理"></category><category term="review"></category></entry><entry><title>如何优雅地使用 Gmail</title><link href="http://guqian110.github.io/pages/2014/04/11/how_to_use_gmail_gracefully.html" rel="alternate"></link><updated>2014-04-11T23:33:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-04-11:pages/2014/04/11/how_to_use_gmail_gracefully.html</id><summary type="html">&lt;p&gt;Gmail 是 Google 提供的邮箱，细数使用 Gmail 已经快 5 年了，但是最近才发现自己的使用方法根本不对，摸索了 2 天，总结一下使用心得～&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;为何使用 Gmail&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;关于 QQ mail 和 Gmail 谁好谁坏的问题，知乎上有一堆&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20010081"&gt;为什么这么多人说 Gmail 好用？Gmail 和 QQmail 相比到底好在哪里？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/19606703"&gt;为什么现在这么多受过高等教育的人喜欢用 Gmail，国内的邮箱如何？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/19724238"&gt;不喜欢 Gmail 而喜欢 QQ 邮箱的人，为什么会产生这样的偏好？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我选择 Gmail 的理由：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Gmail 账户是 Google 所有服务的入口，除了可以使用 Gmail 外和其他所有 Google 产品都有无缝的整合 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强大的功能，比如我最喜欢的 &lt;em&gt;邮件对话功能&lt;/em&gt; 和 &lt;em&gt;label 功能&lt;/em&gt;，还有 &lt;em&gt;过滤器&lt;/em&gt;，Chrome + Gmail，给你最简洁强大的体验 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全，邮件不会受到某些机器&amp;amp;人工的监视，免受 GFW 的干扰&lt;/p&gt;
&lt;p&gt;这恰恰是一些人不使用 Gmail 的原因，因为 Gmail 不稳定，但是关于这个问题，引用 &lt;a href="http://www.zhihu.com/people/hecaitou"&gt;和菜头&lt;/a&gt; 在知乎上的一句话 &lt;a href="http://www.zhihu.com/question/19580396"&gt;“因为Gmail总有访问正常的一天，只要Google不死。对未来没有信心做人和一条咸鱼又有什么区别？”&lt;/a&gt;，况且，在 Geek 面前这都不是问题 。）&lt;/p&gt;
&lt;p&gt;关于 Google 和百度、天朝的恩怨，一个有独立判断能力的人都明白为什么 Google 退出中国 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我是 G 粉，Gmail 代表了自由 :-D&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gmail 可以代收发邮件，测试了一下 QQ mail 和 163 是可以用的，所以，只需要 一个 Gmail 就可以管理 3 个邮箱了。&lt;/p&gt;
&lt;p&gt;对于中国人来说，邮箱貌似是一个很边缘化的东西，而对于西方国家来说，邮箱交流是一件再普通的事了。听说微软 和 Google 公司即使一个办公室内的同事，上下级都是用邮件交流的（国内互联网公司貌似也有，但是没有达到那么频繁的程度），全世界的邮件流量超过 80% 在欧美 。所以，QQ mail 上到处是贺卡、问候、漂流瓶，这也是为什么用 QQ mail 发一份简历时为什么显得不正式的原因 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;如何优雅地使用 Gmail&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;擅自使用知乎风格来命名这个子标题，其实只是我个人的一些使用心得 :-D&lt;/p&gt;
&lt;p&gt;完整的攻略当然是官方的&lt;a href="https://support.google.com/mail/?hl=zh-Hans#topic=3394144"&gt;帮助&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;代收其他邮箱&lt;/h3&gt;
&lt;p&gt;官方帮助文档，导入&lt;a href="https://support.google.com/mail/answer/21289?hl=zh-Hans&amp;amp;ref_topic=3394220"&gt;邮箱账户&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="import" src="/images/how-to-use-gmail-gracefully/import.png" /&gt;&lt;/p&gt;
&lt;p&gt;Gmail 最多可以导入 5 个邮箱账户的邮件，对于普通人来说，远远足够了 。&lt;/p&gt;
&lt;h3&gt;Inbox /Archive&lt;/h3&gt;
&lt;p&gt;这是我最喜欢 Gmail 的地方，也是我以前一直没有正确使用的功能 。以前，我的 inbox 里面有大概 800+  份邮件，包括已读/未读，私人邮件、工作邮件、广告、各个网站注册激活链接、社交网络消息提醒等，全部混在一起 。&lt;/p&gt;
&lt;p&gt;从知乎上找到一个改变我对邮箱 Inbox/Archive 的认识的回答，问题是 &lt;a href="http://www.zhihu.com/question/20042480"&gt;如何有效地使用 Gmail 的 Archive（归档）功能？&lt;/a&gt; ，回答者是&lt;a href="http://www.zhihu.com/people/unogzx"&gt;钢盅郭子&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;精髓就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inbox = 待/未处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archive = 已/不处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阅读完邮件（已读），却无法立刻做出响应（回复或开展相关工作）的可能性是很高的，此时可以将邮件留在收件箱内留待日后处理。&lt;/p&gt;
&lt;p&gt;而将邮件存档，则说明已经不再对此邮件感兴趣了，即便它始终未读，我们也可以通过其他信息（标题、收件人不是自己）确定这是一封不需要关注的邮件。&lt;/p&gt;
&lt;p&gt;有人认为 Inbox 可以覆盖 Archive 的功能。我觉得可以理解，毕竟，喜欢把所有工作都堆放在办公桌台面上的也是大有人在。但即使我们有许多的文件夹或标签可用来分类、标识，抽屉总还是办公桌的默认配置吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像我以前一样，读完的文件仍然保留在 Inbox 中，就像每次都在办公桌面上读完文件都不收拾，越摆越多，只是这个虚拟的办公桌不会堆不下文件 。&lt;/p&gt;
&lt;p&gt;正确的使用方法应该是把 Inbox 视为一个 tmp，在阅读完邮件后，该删除的删除、该归档的归档、该打标签的打标签，就像保持桌面整洁一样 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; 事实上，Inbox 只是一个标签，所谓 归档（Archive） 就是删除这个标签，一份处理完的邮件不再应该打上 Inbox 的标签，所以我们要进行归档 。&lt;/p&gt;
&lt;h3&gt;标签 &amp;amp; 文件夹&lt;/h3&gt;
&lt;p&gt;Gmail 使用了标签代替文件夹，真是一个革命性的创举 。&lt;/p&gt;
&lt;p&gt;帮助里面[列举][lable]了 标签 相比于 文件夹 的优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个会话可以拥有一个以上的标签，而一封邮件只能放在一个文件夹中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;会话可以同时存在于多个位置（收件箱、所有邮件、已发邮件等等），便于日后查找 。而在文件夹中，您必须记住邮件的存档位置，才能找到它 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您可以利用标签对会话进行搜索，而您不可能总是在文件夹内进行搜索 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，我们需要做的就是阅读邮件，然后按照邮件的属性，给它打上标签（label），比如私人邮件、工作邮件、学习邮件、注册验证邮件、社交邮件等等 。每种表情可以自定义颜色，按照邮件在我们心目中的重要程度，给每种标签赋予不同的颜色，一眼看上去，简洁明了，而且很好看 。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://support.google.com/mail/answer/118708?rd=1"&gt;了解如何创建、修改、删除和搜索标签&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;星标邮件 &amp;amp; 重要邮件&lt;/h3&gt;
&lt;p&gt;Gmail 提供了自动识别邮件重要性的功能，它可以根据算法，用户使用习惯等自动识别，标记一个邮件是否是 “重要的”，除此之外，我们可以自己给邮件打星标，来标记邮件的重要程度 。&lt;/p&gt;
&lt;p&gt;根据我的使用习惯，感觉超过 5 个标签，就有点让人迷惑了，所以，我使用的星标一共有 4 个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黄色星星   表示一般重要文件&lt;/li&gt;
&lt;li&gt;红色叹号 表示非常重要邮件&lt;/li&gt;
&lt;li&gt;紫色问号   表示未处理完，将来还需要处理&lt;/li&gt;
&lt;li&gt;绿色对号   表示已经处理完，暂时一段时间都不需要处理的邮件，除非我手动搜索&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;过滤器&lt;/h3&gt;
&lt;p&gt;使用强大的过滤器，我们可以让 Gmail 实现自动对邮件进行分类&lt;/p&gt;
&lt;p&gt;比如，邮件里包含 “注册”、“激活”、“Active”、“Registration”、“Verify” 等单词，就可以自动打上 “注册验证”标签 。&lt;/p&gt;
&lt;p&gt;再比如，为转发邮箱 QQ mail 或者 163 邮箱设置自动打标签，标记为已读，自动存档、转发、删除等 。&lt;/p&gt;
&lt;h3&gt;实验室功能&lt;/h3&gt;
&lt;p&gt;Gmail 实验室有一些很好玩的功能，比如在邮件中看 Google Map，查看 Google Calendar，取消发送等 。至于 Google 目前主推的 Google+ 和 Google Drive 已经整合进 Gmail 了 。&lt;/p&gt;
&lt;p&gt;强大的 Gmail 真是让人越用越不释手 :-D&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://xuyazhou.com/archives/248"&gt;收发Gmail 必学12招，善用邮件分类、前端管理当Gmail 达人&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.acgtyrant.com/how-to-use-gmail-and-mailinglist-correctly.html"&gt;如何優雅地使用 Gmail &amp;amp; Mailing List&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/topic/19550519/top-answers?page=1"&gt;知乎 Gmail 精华问题&lt;/a&gt;&lt;/p&gt;</summary><category term="Gmail"></category></entry><entry><title>在 Ubuntu 下运行 WarCraft</title><link href="http://guqian110.github.io/pages/2014/04/10/run_warcraft_on_ubuntu.html" rel="alternate"></link><updated>2014-04-10T10:58:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-04-10:pages/2014/04/10/run_warcraft_on_ubuntu.html</id><summary type="html">&lt;p&gt;闲来无聊，在 Ubuntu 下 wine 了一个 WarCraft 3 玩&lt;/p&gt;
&lt;p&gt;在实验室的 ”老爷车“ 电脑上运行。稍微有一点卡，在5年前买的笔记本（core 2 T6600, 4G RAM）上运行就感觉不到卡了 。&lt;/p&gt;
&lt;p&gt;实验室电脑配置：&lt;/p&gt;
&lt;p&gt;Processor: Pentium(R) Dual-Core CPU E5200 @ 2.50GHz × 2 &lt;/p&gt;
&lt;p&gt;Graphics: Gallium 0.4 on NV86&lt;/p&gt;
&lt;p&gt;Memory: 2.0 GiB&lt;/p&gt;
&lt;p&gt;OS type: 32-bit&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;安装 Wine&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Wine_(software)"&gt;Wine&lt;/a&gt; 是 wine is not an emulator 的缩写，它可以在 x86、x86-64 上容许类 Unix 操作系统在 X Window System 下运行 Microsoft Windows 程序的软件 .它的官方网址：http://www.winehq.org/&lt;/p&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;p&gt;Ubuntu 软件仓里搜索 Wine，就可以找到 &lt;code&gt;Wine Windows Program Loader&lt;/code&gt;，直接安装即可&lt;/p&gt;
&lt;p&gt;方法二：&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;apt-get&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;wine&lt;/span&gt;
&lt;span class="n"&gt;suod&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;wine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;P.S. 若是其他系统，找不到对应的二进制包，可以直接从官网上下载源码，自己编译（官网上有详细的 &lt;a href="http://wiki.winehq.org/FAQ_zhcn"&gt;FAQ&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;拷贝 WarCraft&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;如果是双系统，则不必拷贝 WarCraft 文件夹，因为我电脑上只有 Ubuntu，所以从同学那里拷贝了一个，放在了 &lt;code&gt;～/&lt;/code&gt; 目录下 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;配置 Wine &amp;amp; WarCraft&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;CD key 注册表问题&lt;/h3&gt;
&lt;p&gt;直接以 wine 运行 &lt;code&gt;war3.exe&lt;/code&gt; 时提示没有 CD key，在 WarCraft 目录下找到了两个注册表文件，&lt;code&gt;War3.reg&lt;/code&gt; 和 &lt;code&gt;一键导入.reg&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在终端下导入注册表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wine&lt;/span&gt; &lt;span class="n"&gt;regedit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后导入这两个文件，再次尝试，还是不行...&lt;/p&gt;
&lt;p&gt;不急，游戏目录下还有一个程序叫 &lt;code&gt;War3RegFixer.exe&lt;/code&gt;，看名字就知道是我们需要的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wine&lt;/span&gt; &lt;span class="n"&gt;War3RegFixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为我的 Ubuntu 是英文版的，打开后是乱码...&lt;/p&gt;
&lt;p&gt;&lt;img alt="war3regfixer" src="/images/run-warcraft-on-ubuntu/war3regfixer.png" /&gt;&lt;/p&gt;
&lt;p&gt;找了一台 Windows 电脑，运行了一下，按照向导就可以修复 CD key 的问题 。&lt;/p&gt;
&lt;h3&gt;分辨率问题&lt;/h3&gt;
&lt;p&gt;第一次运行的结果一般不会全屏，处女座的强迫症犯了，还好比较简单 ：D&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wine&lt;/span&gt; &lt;span class="n"&gt;regedit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到 &lt;code&gt;HKEY_CURRENT_USER/Software/Blizzard Entertainment/Warcraft III/Video&lt;/code&gt;，里面有两个注册表值 &lt;code&gt;resheight&lt;/code&gt; 和 &lt;code&gt;reswidth&lt;/code&gt;，将他们设为和当前分辨率相同的十进制数值就可以了。&lt;/p&gt;
&lt;h3&gt;画面卡&lt;/h3&gt;
&lt;p&gt;因为 Wine 对 DirectX 的支持还不够好，如果电脑配置比较低，运行的时候添加参数 &lt;code&gt;-opengl&lt;/code&gt; 就可以了，为了避免每次运行都要输入参数，可以在注册表 &lt;code&gt;HKEY_CURRENT_USER/Software/Blizzard Entertainment/Warcraft III/&lt;/code&gt; 下新建整数（DWORD），名为 &lt;code&gt;Gfx OpenGL&lt;/code&gt;，值为 1 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;运行&lt;/h2&gt;
&lt;h3&gt;终端下&lt;/h3&gt;
&lt;p&gt;现在就可以在终端下运行 war3.exe 了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wine&lt;/span&gt; &lt;span class="n"&gt;war3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;熟悉的画面就出来了～&lt;/p&gt;
&lt;p&gt;这样子运行如果切出游戏，有时会导致 war3 崩溃或者切换不出去。一个解决方法是以窗口模式运行，只需要添加参数 &lt;code&gt;-window&lt;/code&gt; 即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wine&lt;/span&gt; &lt;span class="n"&gt;war3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="war3window" src="/images/run-warcraft-on-ubuntu/war3window.png" /&gt;&lt;/p&gt;
&lt;p&gt;不过个人不是很喜欢，因为鼠标总是超出窗口，极其不方便，影响游戏操作和感受 ：D&lt;/p&gt;
&lt;h3&gt;桌面启动器&lt;/h3&gt;
&lt;p&gt;我们可以为 war3 添加一个桌面启动器，这样就不用进入终端启动了&lt;/p&gt;
&lt;p&gt;新建文件 &lt;code&gt;frozen-throne.desktop&lt;/code&gt; 文件，添加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Frozen Throne&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/chien/WarCraft/war3.exe&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/chien/WarCraft/war3.jpg&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Application&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后把这个文件移动到 &lt;code&gt;/usr/share/applicants/&lt;/code&gt; ，这时在 unity 中搜索 &lt;code&gt;froz&lt;/code&gt;，就能看到我们刚才新建的启动器了～&lt;/p&gt;
&lt;p&gt;&lt;img alt="war3desktop" src="/images/run-warcraft-on-ubuntu/war3desktop.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;至此，就可以在 Ubuntu 下享受 War3 了&lt;/p&gt;
&lt;p&gt;gl hf！&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://linux-wiki.cn/wiki/zh-hans/%E7%94%A8Wine%E8%BF%90%E8%A1%8C%E9%AD%94%E5%85%BD%E4%BA%89%E9%9C%B8III"&gt;用Wine运行魔兽争霸III&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.ubuntusoft.com/wine-warcraft-3.html#.U0Xt11SSx38"&gt;Wine 魔兽争霸3的一些设置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hi.baidu.com/chenwzox/item/4e6346f1575a7ab231c199b4"&gt;Wine魔兽争霸3，流畅运行+键盘操作+窗口化&lt;/a&gt;&lt;/p&gt;</summary><category term="Wine"></category><category term="WarCraft"></category></entry><entry><title>乔布斯传 书评</title><link href="http://guqian110.github.io/pages/2014/04/09/steve_jobs_review.html" rel="alternate"></link><updated>2014-04-09T17:14:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-04-09:pages/2014/04/09/steve_jobs_review.html</id><summary type="html">&lt;p&gt;一直想买本 &lt;a href="http://book.douban.com/subject/6798611/"&gt;《乔布斯传》&lt;/a&gt;，但是被 ￥68.00 的定价击败了，舍不得花钱买 :D 但是电子书的体验真的太差，看了一半就没有坚持下来。突然发现有个同学有本崭新的《乔布斯传》，于是借来用闲暇时间看了一个多月才看完...&lt;/p&gt;
&lt;p&gt;作为一名资深“挨踢”菜鸟，乔布斯的名字可以说是如雷贯耳，他在普通人眼中，尤其是果粉眼中，基本上就是神一般的存在。以前我也一直这么认为，直到看完这本书，我才发现事实中的“乔帮主”完全是另外一个人，一个有爱有恨，爱哭，执着的同时执着到固执的地步，毫不做作的一个人。&lt;/p&gt;
&lt;p&gt;写几点感触吧，以证明没有白看这本书，看书的价值就在与思考～&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;爱哭的教主&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;这是我看书时，最惊奇的地方。有网友统计，传记里记载的乔布斯一共哭泣了 157 次，其中哭倒在地 25 次，大哭并尖叫 34 次，泪流满面 42 次。以前觉得神一样的“乔帮主”肯定是神挡杀神，佛挡杀佛，怎么会动不动就哭鼻子呢。联系他的人生经历，原来这样子更符合他的性格 。&lt;/p&gt;
&lt;p&gt;在知乎上看到&lt;a href="http://www.zhihu.com/question/19875002"&gt;一个回答&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;乔布斯是一个多愁善感的人，他经常哭。他从小就发现这种方式能达到目的。我觉得实际上他是那种不去刻意控制自己情绪的人，想哭就哭，想骂就骂，想夸就夸，不受限制。我们所知道的他哭的例子，只不过是几个很有名的瞬间，被放大了。&lt;/p&gt;
&lt;p&gt;我们从小就被"男儿有泪不轻弹"给害了，变成了貌似坚强，却浅了情感。&lt;/p&gt;
&lt;p&gt;i hope i can cry when i want to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许，这样率性，真实的人生是另外一种更值得追求的选择，只是这种性格注定只有两种结局：1. 你很nb，可以把内心的真实想法随意说出来，别人即使很不爽，但是也不能对你怎么样，甚至尊敬你，这种最典型的就是yy小说中的主人公，而现实生活中则没几个，乔布斯就是典型例子；2. 你自己没有什么本事，还有一身尖酸刻薄的臭脾气，最后只能是连一个朋友也没有，一事无成。而大多数人，都会选择作出“正确”的选择——尽量修炼自己，积累知识，同时在这个人情冷漠的年代找到一两个好朋友和“红颜／蓝颜知己” 。&lt;/p&gt;
&lt;p&gt;不是任何一个人想哭就能哭的，这也是需要一定资本足够nb才行...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ithome.com/html/it/50290.htm"&gt;乔布斯为何而哭？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;嬉皮士＆禅宗＆迷幻药＆现实扭曲力场&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;乔布斯由于自己身世的原因，总是对这种追求人生真谛的事很感兴趣 。（前半句为个人猜测，后半句是事实）他经历了嬉皮士运动，去印度寻找过 “精神导师”，嗑过迷幻药，在遇到罗伯特 弗里德兰之前，他羞涩又谦逊，非常内敛，但是很快他就学会了弗里德兰的强大气场，并且发展成为自己著名的“现实扭曲力场” 。&lt;/p&gt;
&lt;p&gt;乔布斯从来都不是标准意义上的“好学生”，相反，他叛逆，敏感，但是他也喜欢思考，在养父的影响下，他培养出了对细节要求到苛刻的“工匠精神” 。他直接给惠普的创始人打电话要求一份临时工的工作，参见工程师的会议，探索自己感兴趣的电路，和沃兹一起做出 “能打电话的盒子”，大发一笔 。另一方面，他又直接逼自己的养父母同意退学，去了里德学院，结果还是不去上课，上了一半就退学了 。&lt;/p&gt;
&lt;p&gt;这样的上学经历，在中国人看来，真的是无可就药，他能有后来的成就真的是不可思议。我好像为自己翘课，学习成绩不好找到了一个完美的借口...关于为什么中国出不了乔布斯，中外教育制度差别等话题都被谈烂了，个人认为，外界的客观环境是一方面，自身的努力也很重要（不仅中国出不了乔布斯，事实上，全世界也就这么一位，在美国，乔布斯也不是普通人能效仿的，不然美国遍地都是乔布斯了 -.-）。&lt;/p&gt;
&lt;h2&gt;站在人文与科技的十字路口&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://apple4us.com/2011/10/jobs-begin-end.html"&gt;乔布斯：初心与终点&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;乔布斯是令人倾慕的天才、艺术家、犀利的商业决策者，而他亦正亦邪的浪子一面，暴君般肆虐、魔鬼般欺骗、傀儡师般操控他人，则平添戏剧性和张力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;乔布斯与他的同行们不同。盖茨、Facebook 的扎克伯格和亚马逊的贝佐斯们所致力的，都是将技术融入生活：无论让每户人家的桌子上摆一台电脑、让每个人将自己的身份及社会关系映射到互联网上，还是通过互联网销售书籍、音乐和电影。他们像工业革命时代掌握蒸汽机的人一样，以更高级的技术破坏既有的世界规则，并以此打造庞大的商业帝国 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;而科技对于乔布斯，更像画笔之于梵高、刻刀之于米开朗基罗。他热爱美好的事物，也希望自己成为一名创作者。自 21 岁创立苹果电脑，到 56 岁宣布退休，35 年间他主导设计的软、硬件各超过百款，而在美国商标专利局备案的署有他的名字的专利就多达 300 余个——相比之下，拥有更深厚技术背景的盖茨名下的专利不过九项、Google 的两名创始人拉里·佩奇和谢尔盖·布林拥有的专利总和也没超过 20 个 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以前美国的专利申请很宽松，乔帮主的专利大多数应该是设计方面的吧，而佩奇的专利明显更有技术含量 。&lt;/p&gt;
&lt;p&gt;乔帮主最看不上盖茨的就是 “糟糕的品味”，而盖茨也在访谈中承认自己最想拥有的就是一流的品味。两个人的人生轨迹完全不同，代表了完全相反的两条路，却最终成一生的对手和朋友，多么神奇 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;控制欲&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;乔帮主追求完美的欲望和控制欲强烈到一种不可思议的地步，他想控制产品的方方面面，不但是用户体验，甚至不想让用户拆开 Mac，iphone；里面的电路也和外面一样精致，即使用户永远都不会看到。用户买来直接用就行了，其他的全部由他，苹果公司负责，甚至他认为用户从来不知道自己需要什么样的产品，如汽车的发明人福特说的一样——”在我发明汽车以前，人们只会想买一辆什么样的马车“ 。&lt;/p&gt;
&lt;p&gt;他的这种控制欲望能成功，是建立在高雅的品味之上的。这种软件、硬件一体化，端到端的产品更本轮不到用户插手，这和 Geek 精神完全相悖，在 Apple I 时，他和沃兹的分歧就已经出现了，最终以教主的痛哭流涕收场。幸好这个世界上 Geek 只是少数，幸好他的艺术品味一流高雅，发明了改变P C、手机、动画、音乐等行业的产品，让我们体验到什么是美好的产品 。&lt;/p&gt;
&lt;p&gt;但是这种控制欲和他的 ”现实扭曲力场“ 也有副作用。在饮食上他是严格的素食主义者，面对他得癌症的现实，他也选择性的忽略，即使后来身体状况很糟糕了，他仍然只吃蔬菜和水果。如果他能及早面对癌症肿瘤，或许可以在扩散之前就控制住病情，但是他是乔布斯，所以他不会这样。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Jobs 像个任性的大孩子，尽情挥洒着自己的才能，永不停歇的迈向理想。留给中国人太多感动和反思 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ithome.com/html/it/50290.htm"&gt;乔布斯为何而哭？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://apple4us.com/2011/10/jobs-begin-end.html"&gt;乔布斯：初心与终点&lt;/a&gt;&lt;/p&gt;</summary><category term="Steve Jobs"></category><category term="review"></category></entry><entry><title>Code 书评</title><link href="http://guqian110.github.io/pages/2014/03/21/code_review.html" rel="alternate"></link><updated>2014-03-21T16:33:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-03-21:pages/2014/03/21/code_review.html</id><summary type="html">&lt;p&gt;最近花了一个星期的时间，终于把 &lt;a href="http://book.douban.com/subject/1494026/"&gt;&lt;em&gt;Code&lt;/em&gt;&lt;/a&gt; 看完了，看完全书，观后感总结出来就一个字——爽～&lt;/p&gt;
&lt;p&gt;书名： &lt;a href="http://book.douban.com/subject/1494026/"&gt;&lt;em&gt;Code:  The Hidden Language of Computer Hardware and Software&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者： &lt;a href="http://charlespetzold.com/"&gt;Charles Petzold&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这本书的作者 &lt;a href="http://en.wikipedia.org/wiki/Charles_Petzold"&gt;Charles Petzold&lt;/a&gt; 是 Windows 编程界一位大师，世界顶级技术作家。1994 年 5 月，Petzold 作为仅有的七个人之一（并且是唯一的作家）被《Window Magazine》和 Microsoft 公司授予 “Windows Pioneer” 奖，以表彰他对 Microsoft Windows 的成功做出的贡献 。&lt;/p&gt;
&lt;p&gt;关于这本书的 “江湖地位” ，只需要来看看 stackoverflow 上的这个帖子就明白了：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read"&gt;What is the single most influential book every programmer should read?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本书排名在 &lt;em&gt;第15&lt;/em&gt;，当然绝对排名没有很大的意义，但是也能说明本书的影响力 。另外本书号称 “完全不懂计算机的人也能看懂”... 如果这都不读，我不知道还有什么样的书值得我们去花费时间 : D&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;打通任督二脉&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;纵观程序员的 “武功秘籍”，不外乎两种：一种是讲 &lt;code&gt;道&lt;/code&gt;，另外一种是讲 &lt;code&gt;术&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;道&lt;/code&gt; 即 “道理”（真理），是脱离了具体事物，抽象出来的事物的本质 。比如平时学习的 &lt;em&gt;数学&lt;/em&gt;、&lt;em&gt;物理&lt;/em&gt;、&lt;em&gt;化学&lt;/em&gt; 知识，再比程序中的 &lt;em&gt;算法&lt;/em&gt;、分析解决问题的 &lt;em&gt;思维方式&lt;/em&gt; 等，都不会因时间和环境变化而不适用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;术&lt;/code&gt; 即 “技术”（技巧），是人们在具体工程实践中总结出来的一些技巧。比如 “The art of XXX” ，“The principle of XXX” 等 。&lt;/p&gt;
&lt;p&gt;是的，这本书既不是单独讲 &lt;code&gt;道&lt;/code&gt;，也不是单独讲 &lt;code&gt;术&lt;/code&gt;，而是将两者结合起来，让你不仅明白 &lt;em&gt;道&lt;/em&gt;  的深奥，也明白 &lt;em&gt;术&lt;/em&gt; 的精妙；让你体会到 &lt;em&gt;道&lt;/em&gt; 是如何在 &lt;em&gt;术&lt;/em&gt; 中实现，也体会到 &lt;em&gt;术&lt;/em&gt; 是如何在 &lt;em&gt;道&lt;/em&gt;   的约束下追求极限的 。更加关键的是全书都是用很平白的语言讲述，平白到 “即使完全不懂计算机的人也能读懂”的地步，这就是其厉害之处了。&lt;/p&gt;
&lt;p&gt;就好像你学习了五花八门的心法秘籍和各式武功，每一门都厉害无比，可偏偏无法把这些武功融会贯通，修至大成 。这时候，你需要的不是一本《葵花宝典》，而是《论天下武功之间的关系及其融会贯通方法》，打通自己的任督二脉，也就是这本 &lt;a href="http://book.douban.com/subject/1494026/"&gt;Code&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;读这本书时，让我想起了在大学 4 年间读的各种课程：&lt;/p&gt;
&lt;p&gt;读到 第 6 章 “电报机与继电器” 让我想起 &lt;em&gt;大学物理&lt;/em&gt; ，虽然翘了很多课，但是电磁感应什么的有中学基础，还好没有忘记 。&lt;/p&gt;
&lt;p&gt;读到 第 7～9 章，书中对计数的方法和进制的讨论，让我想起 &lt;em&gt;大学计算机基础&lt;/em&gt; ，然后花了一天时间去把以前一知半解的 “原码、反码、补码” 仔细推敲总结一遍，收获颇大 。&lt;/p&gt;
&lt;p&gt;读到 第 10 章，布尔代数 让我想起 &lt;em&gt;离散数学&lt;/em&gt; ，尤其发人深醒的是布尔发明了 布尔逻辑 100 多年后， 才有人（香农）将其和电路联系起来 。&lt;/p&gt;
&lt;p&gt;读到 第 11～13 章，跟随作者的思路，我才明白当年令人痛不欲生的 &lt;em&gt;模拟电路&lt;/em&gt; 、&lt;em&gt;数字电路&lt;/em&gt;  到底是来干什么的，数字电路是如何从最基本的门搭建出来更强的功能的元器件的，联系前面学习的 编码的知识，明白这样做的道理 。&lt;/p&gt;
&lt;p&gt;读到 第 16～22 章，让我想起 &lt;em&gt;微机原理&lt;/em&gt; ，对微处理器的工作方式不再模糊不清，跟随着作者的思路搭建一台 “计算机”（当然和现在的计算机完全不同，但是原理是一模一样的），为自己搭建的处理器设计一套可以实现自动功能的编程语言，然后写一段程序，甚至一窥操作系统 。&lt;/p&gt;
&lt;p&gt;还有等等...&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;
胡扯了这么多，书固然是好书，但是更让人深思的是 国内外教育的差异 。吐槽我们的教育体制毫无意义，吐槽的人都当不上教育部长，没有能力去改变现状，有能力的 guan猿却根本没有动力去改变。作为普通人，我们能做到的就是自己努力，找真正的好书、向真正的大师学习，比如上面提到过的&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read"&gt;What is the single most influential book every programmer should read?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了技术、还有很多程序员需要看的书。找到一本好书，然后 Let's start it !&lt;/p&gt;</summary><category term="Code"></category><category term="review"></category></entry><entry><title>原码、反码、补码</title><link href="http://guqian110.github.io/pages/2014/03/19/signed_number_representations.html" rel="alternate"></link><updated>2014-03-19T14:31:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-03-19:pages/2014/03/19/signed_number_representations.html</id><summary type="html">&lt;p&gt;最近找到一本好书——&lt;a href="http://book.douban.com/subject/4822685/"&gt;《编码: 隐匿在计算机软硬件背后的语言》&lt;/a&gt;。作者是大名鼎鼎的 &lt;a href="http://en.wikipedia.org/wiki/Charles_Petzold"&gt;Charles Petzold&lt;/a&gt; (&lt;a href="http://charlespetzold.com/"&gt;个人网站&lt;/a&gt;)。书的介绍也很有意思，据说完全不懂计算机的人也能看懂...于是买了本来拜读一下（这种文章当然是英文版最好了，只是学生党没银子，只好买翻译版了）&lt;/p&gt;
&lt;p&gt;看到用继电器搭建加法器、减法器，讨论二进制编码方式那章，想起一直不是很清楚的原码、反码、补码等，果断 &lt;a href="https://www.google.com.hk/"&gt;Google&lt;/a&gt;、&lt;a href="http://en.wikipedia.org/wiki/Main_Page"&gt;Wiki&lt;/a&gt;，于是总结出下文。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;机器数&lt;/h3&gt;
&lt;p&gt;顾名思义，一个数字在机器中的存储方式，“&lt;em&gt;数&lt;/em&gt; ” 是指 有符号数（&lt;code&gt;signed number&lt;/code&gt;），即包含了正负号的数，“&lt;em&gt;机器&lt;/em&gt; ” 当然是指计算机（&lt;code&gt;Computer&lt;/code&gt;）了。&lt;/p&gt;
&lt;p&gt;从小学毕业，刚进入初中，我们就知道数字是有符号的：&lt;em&gt;正数&lt;/em&gt; &amp;amp; &lt;em&gt;负数&lt;/em&gt;。但是在计算机的哲学体系中，整个世界只有两个元素：0 &amp;amp; 1 ，没有额外的专门表示正负号的符号。怎么办呢？解决方法就是添加一位来表示符号。于是，人们约定把符号位放在一个数字的 &lt;em&gt;最高有效位&lt;/em&gt;（Most significant bit, &lt;code&gt;MSB&lt;/code&gt;），在&lt;a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F#.E5.A4.A7.E7.AB.AF.E5.BA.8F"&gt;大端序&lt;/a&gt;中，&lt;code&gt;MSB&lt;/code&gt; 指的是一个二进制数的最左边的一位。一般，&lt;code&gt;MSB&lt;/code&gt; 等于 0  表示正数，1 表示负数。&lt;/p&gt;
&lt;h3&gt;真值&lt;/h3&gt;
&lt;p&gt;因为机器数中有一位表示符号，所以机器数的形式值不等于真正的数值，机器数对应的数值称为机器数的 &lt;em&gt;真值&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
举个栗子：&lt;/p&gt;
&lt;p&gt;用 8 bit 表示一个数字，因为有符号位的存在，可以表示的范围为 (-127, -0, +0, +127) 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# +5 的 机器数 = 0000_0101 ；真值 = + 000_0101&lt;/span&gt;

&lt;span class="c"&gt;# -5 的 机器数 = 1000_0101 ；真值 = - 000_0101&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种机器数的编码方式称为 &lt;a href="http://en.wikipedia.org/wiki/Signed_magnitude#Signed_magnitude_representation"&gt;&lt;em&gt;原码&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;signed-magnitude&lt;/code&gt;) ，是机器数编码方式中的一种。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The four best-known methods of extending the binary numeral system to represent signed numbers are: sign-and-magnitude, Ones' complement, two's complement, and excess-K.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is no definitive criterion by which any of the representations is universally superior. The representation used in most current computing devices is two's complement, although the Unisys ClearPath Dorado series mainframes use Ones' complement.&lt;/em&gt;
（&lt;a href="http://en.wikipedia.org/wiki/Signed_number_representations"&gt;Wikipeida&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;下面分别讨论：&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;机器数表示法&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;原码（sign and magnitude）&lt;/h3&gt;
&lt;h4&gt;编码规则&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 正数：  0_xxxxxxx&lt;/span&gt;

&lt;span class="c"&gt;# 负数：  1_xxxxxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8 bit 的原码可以表示的范围是 [ -127, -0, +0, +127 ]，共 255 个数&lt;/p&gt;
&lt;h4&gt;计算法则&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 两数符号相同：  低位相加，最高位的符号位不变（当低位相加产生进位时，溢出 Overflow）&lt;/span&gt;

&lt;span class="c"&gt;# 两数符号不同：  比较绝对值的大小，差的绝对值 = 大数 - 小数 ，符号位和大数的符号位相同&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;缺点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;电路复杂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从前面的计算方法中可以看到，原码中的符号位不能直接参与运算，必须要单独的线路来确定符号位&lt;/li&gt;
&lt;li&gt;原码的计算不能避免减法运算，加法运算是产生 &lt;em&gt;进位&lt;/em&gt;，减法运算需要 &lt;em&gt;借位&lt;/em&gt;，这是两种不同的运算过程，需要额外的电路把 &lt;code&gt;加法器&lt;/code&gt; 改造为 &lt;code&gt;减法器&lt;/code&gt;（&lt;a href="http://www.charlespetzold.com/code/"&gt;《编码》&lt;/a&gt;这本书里面有详细介绍 如何使用继电器搭建 加法器 和 减法器）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0的表示不唯一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0可以编码为两种方式： &lt;code&gt;0000_0000&lt;/code&gt; 和 &lt;code&gt;1000_0000&lt;/code&gt;，进一步增加了逻辑的复杂性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;This approach is directly comparable to the common way of showing a sign (placing a "+" or "−" next to the number's magnitude). Some early binary computers (e.g., &lt;a href="http://en.wikipedia.org/wiki/IBM_7090"&gt;IBM 7090&lt;/a&gt;) used this representation, perhaps because of its natural relation to common usage. Signed magnitude is the most common way of representing the significand in floating point values.
（&lt;a href="http://en.wikipedia.org/wiki/Signed_magnitude#Signed_magnitude_representation"&gt;Wiki&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;虽然 &lt;code&gt;原码&lt;/code&gt; 的编码方式最接近人类的习惯，但是，并不适合在计算机中使用，为了解决原码计算中的一些问题，于是 &lt;code&gt;反码&lt;/code&gt; 就出现了&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;反码（Ones' complement）&lt;/h3&gt;
&lt;p&gt;首先，来看看 &lt;a href="http://www.charlespetzold.com/code/"&gt;Code&lt;/a&gt; 中介绍了基于10进制的补码：&lt;/p&gt;
&lt;p&gt;实现一个减法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;253 - 176 =？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按照我们从数学课上学习到知识，这个计算需要进行 &lt;em&gt;借位&lt;/em&gt; 操作，为了避免这个在计算机中很难实现的操作，可以稍微变化一下计算过程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;253 + (999-176) + 1 - 1000 = ?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在这个过程中，用两个减法代替了原来的一个减法，避免了烦琐的 &lt;em&gt;借位&lt;/em&gt; 操作。在这个运算中，负数 &lt;code&gt;-176&lt;/code&gt; 转化为另外一个数 &lt;code&gt;999 - 176&lt;/code&gt; ，这个数称为它的 &lt;code&gt;9 的补数(nine's complement)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这个运算的关键在于：&lt;em&gt;把负数用 9 的补数表示，减法转化为加法&lt;/em&gt; 。同理，我们推广到 2 进制，就得到了 &lt;code&gt;1 的补数(Ones' complement)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;把减数从一串 1 当中减去，结果就称为这个数的 “1 的补数”，在求 1 的补数的时候，其实并不需要做减法，因为求 1 的补数，只需要将原来的 1 变为 0 ，0 变为 1 即可，也就是取反，在电路中只需要一个反向器就可以实现，所以 &lt;code&gt;1 的补数&lt;/code&gt; 也称为 &lt;code&gt;反码&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;从上面的描述就可以很容易写出反码的编码规则&lt;/p&gt;
&lt;h4&gt;编码规则&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 正数    反码 = 原码&lt;/span&gt;

&lt;span class="c"&gt;# 负数    反码 = 符号位不变，其他位取反&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8 bit 的反码可以表示的范围是 [ -127, -0, +0, +127 ]，共 255 个数&lt;/p&gt;
&lt;h4&gt;计算法则&lt;/h4&gt;
&lt;p&gt;反码的计算不用区分符号和绝对值，直接进行计算，计算结果若有溢出，需要将溢出加到最低位，这种操作称为 “循环进位”（end-around carry）&lt;/p&gt;
&lt;h4&gt;优缺点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;优点，电路简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为不需要把符号和绝对值分开考虑，正数和负数的加法都一样算，所以反码计算不需要单独的判断符号的电路，也不需要判断两个数绝对值相对大小的电路&lt;/li&gt;
&lt;li&gt;节省了减法器，只需要一组额外的反向器就能把加法器改进为可以计算 加 / 减法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机中仍然需要进行 “循环进位” 的硬件电路，但是这种复杂度的电路是可以接受的&lt;/li&gt;
&lt;li&gt;0的表示不唯一，0的编码仍然有两种方式： &lt;code&gt;0000_0000&lt;/code&gt; 和 &lt;code&gt;1111_1111&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/PDP-1"&gt;PDP-1&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/CDC_160_series"&gt;CDC 160 series&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/CDC_6000_series"&gt;CDC 6000 series&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/UNIVAC_1100"&gt;UNIVAC 1100 series&lt;/a&gt;, and the &lt;a href="http://en.wikipedia.org/wiki/LINC"&gt;LINC&lt;/a&gt; computer used Ones' complement representation.（&lt;a href="http://en.wikipedia.org/wiki/Signed_number_representations#Ones.27_complement"&gt;Wiki&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;反码&lt;/code&gt; 中仍然没有避免 0 有两种编码方式的问题，虽然对于人来说，+0 和 -0 没有区别，但是对于计算机来说，判断一个数是否为0，要进行两次判断。为了解决 0 的表示问题和硬件上的 “循环进位”，于是人们又发明了 &lt;code&gt;补码&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;补码（Two's complement）&lt;/h3&gt;
&lt;p&gt;前面介绍的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;253 - 176 =？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按照反码的方法可以转换为&lt;/p&gt;
&lt;p&gt;&lt;code&gt;253 + (999-176) + 1 - 1000 = ?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果我们稍微再变形一下，就有&lt;/p&gt;
&lt;p&gt;&lt;code&gt;253 + (1000 - 176) - 1000 = ?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在这个运算中 &lt;code&gt;-176&lt;/code&gt; 转化为 &lt;code&gt;1000 - 176&lt;/code&gt;，这个数称为它的 &lt;code&gt;10 的补数(ten's complement)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这个运算的关键在于：&lt;em&gt;把负数用 10 的补数表示，减法转化为加法&lt;/em&gt; 。同理，我们推广到 2 进制，就得到了 &lt;code&gt;2 的补数(two's complement)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;因为对一位二进制数 b 取补码就是 &lt;code&gt;1 - b + 1 = 10 - b&lt;/code&gt;，相当于从 2 里面减去 b ,所以，这种方法称为 &lt;code&gt;2 的补数&lt;/code&gt;，这种编码方式简称 &lt;code&gt;补码&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;举例说明，要表示 -4 ，需要对 &lt;code&gt;0000_0100&lt;/code&gt;取补码，&lt;code&gt;1111_1111 - 0000_0100 + 1 = 1_0000_0000 - 0000_0100&lt;/code&gt;，相当于从2^8里面减去 4 。&lt;/p&gt;
&lt;p&gt;从上面的计算过程可以很容易写出补码的编码规则&lt;/p&gt;
&lt;h4&gt;编码规则&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 正数    补码 = 原码&lt;/span&gt;

&lt;span class="c"&gt;# 负数    补码 = 反码 + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8 bit补码可以表示的范围是 [ -128, -1, +0, +127 ]，共 256 个数 。&lt;/p&gt;
&lt;p&gt;目前大多数计算机内部使用的都是补码，所以对于编程中的 32 位 &lt;code&gt;int&lt;/code&gt; 型变量，它可以表示的范围就是 [ -2^32, +2^32 - 1] 。&lt;/p&gt;
&lt;p&gt;P.S. -128 没有对应的 原码 和反码，它的补码为 &lt;code&gt;1000_0000&lt;/code&gt; 。&lt;/p&gt;
&lt;h4&gt;计算法则&lt;/h4&gt;
&lt;p&gt;采用补码的系统，减法转换成加法（减法等同于加上一个负数，所以不再有减法），忽略计算结果最高位的进位，不必加回到最低位上去。&lt;/p&gt;
&lt;h4&gt;优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;电路简单，从计算法则中可以看到，不用考虑 “循环进位” 的问题，所以，补码系统的电路是最简单的，这也是补码系统应用最广泛的原因&lt;/li&gt;
&lt;li&gt;0 的表示是唯一的，&lt;code&gt;0000_0000&lt;/code&gt;，不再有 -0 的困扰&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;补码中的数学原理&lt;/h4&gt;
&lt;p&gt;补码能将减法转化为加法，其数学原理就是 &lt;em&gt;模&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 如果有个手表的时间为6点，实际时间为4点，那么如何校准呢？&lt;/span&gt;

&lt;span class="c"&gt;# 答案有两种方法：&lt;/span&gt;

&lt;span class="c"&gt;#   1. 逆时针转动  2，也就是做 减法 6 - 2 = 4&lt;/span&gt;
&lt;span class="c"&gt;#   2. 顺时针转动 10, 也就是做 加法 (6 + 10) mod 12 = 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从这个例子中就可以很明白的看到 &lt;em&gt;减法&lt;/em&gt; 是如何转化为 &lt;em&gt;加法&lt;/em&gt; 的，也就是如何将一个 &lt;em&gt;负数&lt;/em&gt; 转化为 &lt;em&gt;正数&lt;/em&gt;的 。&lt;/p&gt;
&lt;p&gt;即有公式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A - B = A + (-B + M)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个式子中的 &lt;code&gt;-B + M&lt;/code&gt; 即为 &lt;code&gt;B&lt;/code&gt; 的 &lt;em&gt;补数&lt;/em&gt; （类似于几何中的&lt;em&gt;补角&lt;/em&gt;） 。&lt;/p&gt;
&lt;h4&gt;溢出问题（摘自 &lt;a href="http://baike.baidu.com/view/60437.htm"&gt;百度百科&lt;/a&gt;）&lt;/h4&gt;
&lt;p&gt;无论采用何种机器数，只要运算的结果大于数值设备所能表示数的范围，就会产生溢出。 溢出现象应当作一种故障来处理，因为它使结果数发生错误。异号两数相加时，实际是两数的绝对值相减，不可能产生溢出，但有可能出现正常进位；同号两数相加时，实际上是两数的绝对值相加，既可能产生溢出，也可能出现正常进位。&lt;/p&gt;
&lt;p&gt;由于补码运算存在符号位进位自然丢失而运算结果正确的问题，因此，应区分补码的溢出与正常进位。&lt;/p&gt;
&lt;p&gt;详细论证过程不再复制粘贴了...直接给出结论&lt;/p&gt;
&lt;p&gt;结论：在相加过程中最高位产生的进位和次高位产生的进位如果相同则没有溢出，如果不同则表示有溢出。逻辑电路的实现可以把这两个进位连接到一个异或门，把异或门的输出连接到溢出标志位。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;由 &lt;em&gt;“减去一个数 = 加上一个负数”&lt;/em&gt;，计算机系统内部就不再有减法操作&lt;/p&gt;
&lt;p&gt;由 &lt;em&gt;“负数的表示由取模运算转变为补码表示”&lt;/em&gt;，计算机系统就可以用一个正数来表示负数&lt;/p&gt;
&lt;p&gt;所以，计算机内部只需要加法器就可以完成 加减法 和 正负数 的表示 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Two's complement is the easiest to implement in hardware, which may be the ultimate reason for its widespread popularity. Processors on the early mainframes often consisted of thousands of transistors – eliminating a significant number of transistors was a significant cost savings. Mainframes such as the IBM System/360, the GE-600 series, and the PDP-6 and PDP-10 used two's complement, as did minicomputers such as the PDP-5 and PDP-8 and the PDP-11 and VAX. The architects of the early integrated circuit-based CPUs (Intel 8080, etc.) chose to use two's complement math. As IC technology advanced, virtually all adopted two's complement technology. x86, m68k, Power Architecture, MIPS, SPARC, ARM, Itanium, PA-RISC, and DEC Alpha processors are all two's complement.&lt;/em&gt;(&lt;a href="http://en.wikipedia.org/wiki/Signed_number_representations#Two.27s_complement"&gt;Wiki&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;有符号数和无符号数（摘自 &lt;a href="http://learn.akae.cn/media/ch14s03.html"&gt;整数的加减运算&lt;/a&gt;）&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;如果把所有的位数都用来表示数值的大小，那么8 bit 二进制数可以表示的范围是 [0, 255] ，这种称为无符号数 。其实计算机做加法时并不区分操作数是有符号数还是无符号数，计算过程都一样 。&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;#   1000_0010              130                  -126&lt;/span&gt;
    &lt;span class="c"&gt;# + 1111_1000     =&amp;gt;   +   256          =&amp;gt;  +   -  8&lt;/span&gt;
    &lt;span class="c"&gt;# --------------      ---------------      -----------&lt;/span&gt;
    &lt;span class="c"&gt;# 1_0111_1010              122 + 256             122&lt;/span&gt;

    &lt;span class="c"&gt;#                        无符号数（ok）        有符号数（error）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;计算机的加法器在做完计算之后，根据最高位产生的进位设置 &lt;em&gt;进位标志&lt;/em&gt; ，同时根据最高位和次高位产生的进位的异或设置 &lt;em&gt;溢出标志&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;如果看作无符号数130和248相加，计算结果是122进1，也就是122+256，这个结果是对的; 如果把这两个操作数看作有符号数-126和-8相加，计算结果是错的，因为产生了溢出 。&lt;/p&gt;
&lt;p&gt;至于这个加法到底是有符号数加法还是无符号数加法则取决于程序怎么理解了，如果程序把它理解成有符号数加法，下一步就要检查溢出标志，如果程序把它理解成无符号数加法，下一步就要检查进位标志。&lt;/p&gt;
&lt;p&gt;通常计算机在做算术运算之后还可能设置另外两个标志，如果计算结果的所有bit都是零则设置零标志，如果计算结果的最高位是1则设置负数标志，如果程序把计算结果理解成有符号数，也可以检查负数标志判断结果是正是负。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;从 &lt;code&gt;原码&lt;/code&gt; 到 &lt;code&gt;反码&lt;/code&gt;，再到 &lt;code&gt;补码&lt;/code&gt;，可以清楚看到为了解决问题而改进的技术路线，虽然这些是非常基础知识，可能对我们对写程序没有很大的帮助，但是搞清楚这些不仅让你对计算机底层更加了解，更加关键的是 &lt;em&gt;这个学习过程&lt;/em&gt; 和 &lt;em&gt;解决编码问题的思路&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Signed_number_representations"&gt;Signed number representations——Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Ones'_complement"&gt;Ones' complement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Two's_complement"&gt;Two's complement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://learn.akae.cn/media/ch14s03.html"&gt;整数的加减运算&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baike.baidu.com/view/60437.htm"&gt;机器数——百度百科&lt;/a&gt;&lt;/p&gt;</summary><category term="Code"></category></entry><entry><title>First Blood</title><link href="http://guqian110.github.io/pages/2014/03/17/first_blood.html" rel="alternate"></link><updated>2014-03-17T14:29:00+08:00</updated><author><name>Chien Gu</name></author><id>tag:guqian110.github.io,2014-03-17:pages/2014/03/17/first_blood.html</id><summary type="html">&lt;h2&gt;为什么要搭建自己的博客&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;首先，来看看各类门户博客的优缺点。&lt;/p&gt;
&lt;p&gt;国内大多数人的朋友圈都聚集在 QQ、微博、人人等社交平台上。但是这些社区并不适合写博客，面对满屏幕毫无营养的转载文章和五颜六色的广告，谁还有兴趣把自己的生活感悟写下来？其实，我们需要的仅仅是一方可以写字的净土。至于各大技术博客平台，它们明显不适合用来记录生活中的点滴琐事。CSDN 的博客系统一直是人们的吐槽对象，况且，CSDN 已经沦为学生求作业的地方，很多大神都转移阵地，去搭建自己的博客了。&lt;/p&gt;
&lt;p&gt;既然这些平台都不能满足我们的需求，为什么我们不搭建一个属于自己的博客呢？&lt;/p&gt;
&lt;p&gt;我们写博客是为了记录自己的学习、生活和成长，寻找志同道合的知己。个人博客也是一种身份，代表了博主的兴趣爱好和品味。我们自己是博客的主人，可以自己定制主题和内容，而无需经受别人的审核和莫名删除的烦恼。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;为什么选择 Markdown + Pelican + GitHub&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;不同于面向 &lt;em&gt;发布&lt;/em&gt; 的 &lt;code&gt;Html&lt;/code&gt; 语言，&lt;code&gt;Markdown&lt;/code&gt; 是一种面向 &lt;em&gt;书写&lt;/em&gt; 的语言，其目的就是让文档更容易写和读，让人们不再为 &lt;code&gt;Html&lt;/code&gt; 繁琐的标签烦恼。&lt;/p&gt;
&lt;p&gt;搭建个人博客最方便也最简易的方式就是采用 &lt;code&gt;WordPress&lt;/code&gt; 平台。但是，简易也意味着无脑、不能随行所欲地定制。我们只是需要一个写字的地方，显然 &lt;code&gt;WordPress&lt;/code&gt; 太臃肿，用来生成静态博客的 &lt;code&gt;Pelican&lt;/code&gt; 才是我们的最佳选择。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Github&lt;/code&gt; 是一个共享虚拟主机服务，用于存放使用 &lt;code&gt;Git&lt;/code&gt; 版本控制的软件代码和内容项目。——by &lt;a href="http://zh.wikipedia.org/wiki/GitHub"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以我们只要采用 &lt;code&gt;Markdown&lt;/code&gt; 写下我们的博客内容，用 &lt;code&gt;Pelican&lt;/code&gt; 生成静态网页，然后将其托管到&lt;code&gt;GitHub&lt;/code&gt; 上，就大功告成了！&lt;/p&gt;
&lt;p&gt;折腾了几天，终于在 &lt;a href="https://www.google.com.hk"&gt;Google&lt;/a&gt; 和以下几篇博客的帮助下，初步搭建好了个人的小窝。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt;一步一步打造Geek风格的技术博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/21/blog-create/"&gt;使用Pelican和GitHub Pages搭建个人博客 —— 基础篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.dongxf.com/3_Build_Personal_Blog_With_Pelican_And_GitHub_Pages.html"&gt;用 Pelican 和 GitHub Pages 搭建免费的个人博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://frantic1048.com/bo-ke-dan-sheng-ji-ji-yu-githubpelicanchuang-jian-bo-ke-de-zheng-ge-guo-cheng.html"&gt;博客诞生记:基于GitHub+Pelican创建博客的整个过程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;如何搭建&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;本博客就是在参考以上 4篇博客的教程 + &lt;a href="https://www.google.com.hk"&gt;Google&lt;/a&gt; ，在 &lt;code&gt;Ubuntu 13.10&lt;/code&gt; 下完成的，十分感谢各位博主的分享。在搭建过程中遇到了不少问题，但是在万能的 Google 面前，都一切都不是问题，同时我也学习到了不少知识。&lt;/p&gt;
&lt;p&gt;详细的搭建过程参考以上4篇博客，不再赘述，下面总结一下自己安装过程中遇到的问题吧。&lt;/p&gt;
&lt;h3&gt;学习流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;学习 &lt;code&gt;Git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gitref.org/"&gt;Git Refence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book"&gt;Pro Git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://help.github.com/"&gt;GitHub help&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装、学习使用 &lt;code&gt;Pelican&lt;/code&gt; 搭建博客骨架&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/latest/"&gt;Pelican Doc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 &lt;code&gt;Markdown&lt;/code&gt; 语法，写博客内容&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wowubuntu.com/markdown/#hr"&gt;Markdown语法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sourceforge.net/projects/retext/"&gt;Markdown 编辑器 Retext&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pelican theme&lt;/code&gt; 修改&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/latest/settings.html#themes"&gt;Pelican theme setting&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;问题总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一种安装方式不成功时，可以试试其他方法。使用命令行安装 &lt;code&gt;Pelican&lt;/code&gt; 时，由于学校的渣网速，我安装了好几遍都 &lt;em&gt;time_out&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必须先安装 &lt;code&gt;Pelican&lt;/code&gt;，后安装 &lt;code&gt;Markdown&lt;/code&gt;，否则在生成网页时会报错，不能识别 &lt;code&gt;.md&lt;/code&gt; 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 &lt;code&gt;pelican-quickstart&lt;/code&gt; 时，有些选项是可以在 &lt;code&gt;pelicanconf.py&lt;/code&gt; 中修改的，有些不行 。比如是否启用文章分页，是不能通过后期修改的，如果第一次没有启用，在 pelicanconf.py 中直接修改会报错，只能保存好文章、下载的主题和配置文件，重新用向导生成博客框架 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于薄弱的 &lt;code&gt;Html&lt;/code&gt; 知识， &lt;code&gt;Pelican theme&lt;/code&gt; 的修改花费了很多时间 (Orz...)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;总之，既然搭建好了博客，就要坚持认真写下去，记录下生活中的每一点一滴。&lt;/p&gt;</summary><category term="Build Blog"></category></entry></feed>